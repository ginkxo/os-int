#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <libgen.h>
#include "ext2.h"

unsigned char * disk;

#define SINGLE_POINTER_COUNT 12
#define DISK_SECTOR 512

int DSR = EXT2_BLOCK_SIZE / DISK_SECTOR; // disk sector ratio

int addAsDirEntry(char * filepath, int fileInode, int parentInode) {

	return 0;

}

int readAndCopy(char * filepath, int filesizeBytes, int dirParInodeNum) {

	// subfunctions: fileSize, calculateSpace, emptyAvailableBlocks, editBitmap, storeDataInBlock
	return 0;

}

int storeDataInBlock(int blockNumber) {
	// stores in a block
	return 0;

}

int calculateSpace(int filesize) {
	// returns -1 if not enough space in blocks
	return 0;
}


int editBitmap(int bitmapNumber, int inodeOrBlock) {

	// if 0, inode, if 1, block bitmap
	// returns 0 on success

	return 0;

}

int * emptyAvailableBlocks() {

	// iterates through the bitmap and retrieves all available block numbers in an array
	// may have to malloc
	// returns array

	int var[] = {0,0}; // placeholder
	return var; 

}

int allocateNewFileInode(int filesizeBytes) {

	struct ext2_super_block * superBlock = (struct ext2_super_block *)(disk + EXT2_BLOCK_SIZE * 1);
	struct ext2_group_desc * blockGp = (struct ext2_group_desc *)(disk + EXT2_BLOCK_SIZE * 2);

	if (superBlock->s_free_inodes_count == 0 || superBlock->s_free_blocks_count == 0) {
		// FAILURE, NO SPACE	
		return -1; // ENOSPC, fix later
	}

	unsigned char * inodeTable = (unsigned char *)(disk + EXT2_BLOCK_SIZE * blockGp->bg_inode_table);
	
	int freeInodes = superBlock->s_free_inodes_count;
	int numInodes = superBlock->s_inodes_count;
	int totalInodes = freeInodes + numInodes; // is this actually equal
	int currInodeID;
	int firstEmptyInode = -1;

	for (currInodeID = EXT2_ROOT_INO - 1; currInodeID < totalInodes; currInodeID++) {

		if (currInodeID >= EXT2_GOOD_OLD_FIRST_INO) {

			struct ext2_inode * inode = (struct ext2_inode *)(inodetable + currInodeID * sizeof(struct ext2_inode));

			if (!inode->i_size) { // THIS COULD SEGFAULT ...

				firstEmptyInode = currInodeID;
				break; // the first inode slot from the front that is "empty"

			}

		}

	} // if this does segfault, we will change iteration to numInodes instead

	if (firstEmptyInode == -1) {
		// some kind of error i guess
		return -1;
	}

	struct ext2_inode * newInode = (struct ext2_inode *)(inodetable + firstEmptyNode * sizeof(struct ext2_inode));	
	

	newInode->i_mode = EXT2_S_IFREG;
	newInode->i_uid = 0;
	newInode->i_size = filesizeBytes; // default for new directories
	newInode->i_gid = 0;
	newInode->i_links_count = 0; // . and ..
	newInode->i_blocks = (filesizeBytes / DISK_SECTOR) + 1; // currently set to 2
	newInode->osd1 = 0;

	newInode->i_generation = 0;
	newInode->i_file_acl = 0;
	newInode->i_dir_acl = 0;
	newInode->i_faddr = 0;

	newInode->extra[0] = 0;
	newInode->extra[1] = 0;
	newInode->extra[2] = 0;

	// NEED TO ALLOCATE BLOCKS HERE
	
	/////// Might move these to until after block allocation is successful! ////////
	superBlock->s_inodes_count = superBlock->s_inodes_count + 1;
	superBlock->s_free_inodes_count = superBlock->s_free_inodes_count - 1;

	blockGp->bg_free_inodes_count = blockGp->bg_free_inodes_count - 1;
	// blockGp->bg_used_dirs_count = blockGp->bg_used_dirs_count + 1;

	return firstEmptyNode;
}

int fileGoodPath (char * ext2Path, char * localPath) {

	/*
	char * etc1 = "HELLO.txt"; 
    char * etc2 = "another/hello/HELLO.txt";
    
    int etc1len = strlen(etc1);
    int etc2len = strlen(etc2);
    
    char etc01[etc1len+1];
    char etc02[etc2len+1];
    
    memset(etc01, 0, sizeof(etc01));
    memset(etc02, 0, sizeof(etc02));
    
    strncpy(etc01, etc1, etc1len+1);
    strncpy(etc02, etc2, etc2len+1);
    
    
    printf("%s %s \n", dirname(etc01), basename(etc01)); --> . HELLO.txt
    printf("%s %s \n", dirname(etc02), basename(etc02)); --> another/hello HELLO.txt

    */

	// INITIALIZATIONS

	struct ext2_super_block * superBlock = (struct ext2_super_block *)(disk + EXT2_BLOCK_SIZE * 1);
	struct ext2_group_desc * blockGp = (struct ext2_group_desc *)(disk + EXT2_BLOCK_SIZE *2);
	unsigned char * inodeTable = (unsigned char *)(disk + EXT2_BLOCK_SIZE * blockGp->bg_inode_table);

	int inodeID = EXT2_ROOT_INO - 1;

	// CONVERTING FROM STRING CONSTANTS

	int ext2PathLen = strlen(ext2Path);
	char basepath[ext2PathLen+1];
	memset(basepath, 0, sizeof(basepath));
	strncpy(basepath, ext2Path, ext2PathLen+1);

	char * fileToCreateConstant = basename(basepath); // "HELLO.txt"
	char * pathnameConstant = dirname(basepath); // "another/hello" or "." if root




}

int fileGoodpath (char * basepath, char * localPath) {

	// localPath: the relative path of the file you wanna copy
	// basepath: the absolute path of where you are copying 

	// will either return an error code, an EEXIST code, or the parent inode number

	struct ext2_super_block * superBlock = (struct ext2_super_block *)(disk + EXT2_BLOCK_SIZE * 1);
	struct ext2_group_desc * blockGp = (struct ext2_group_desc *)(disk + EXT2_BLOCK_SIZE * 2);
	unsigned char * inodeTable = (unsigned char *)(disk + EXT2_BLOCK_SIZE * blockGp->bg_inode_table);

	int inodeID = EXT2_ROOT_INO - 1;

	char * lastItemConstant = basename(basepath);
	char * pathnameConstant = dirname(basepath);

	char * lastItemLocal = basename(localPath);

	char lastItem[EXT2_NAME_LEN];
	char pathnameSansEnd[EXT2_NAME_LEN * 10];
	char pathname[EXT2_NAME_LEN * 1000];

	char lastItemLocalA[EXT2_NAME_LEN];

	memset(lastItem, 0, EXT2_NAME_LEN);
	memset(pathnameSansEnd, 0, EXT2_NAME_LEN * 10);
	memset(pathname, 0, EXT2_NAME_LEN * 1000);

	memset(lastItemLocalA, 0, EXT2_NAME_LEN);

	strncpy(lastItem, lastItemConstant, EXT2_NAME_LEN);
	strncpy(pathnameSansEnd, pathnameConstant, EXT2_NAME_LEN * 10);
	strncpy(pathname, basepath, EXT2_NAME_LEN * 1000);
	
	strncpy(lastItemLocalA, lastItemLocal, EXT2_NAME_LEN);

	char * parentDir;
	char * childDir;

	parentDir = strtok(pathname, "/");
	childDir = strtok(NULL, "/");

	struct stat lbuf;

	int status = lstat(basepath, &lbuf);
	if (status < 0) {
		fprintf(stderr, "Failure \n");
		return -1;
	} 

	int isfile = S_ISREG(lbuf.st_mode);
	int isdir = S_ISDIR(lbuf.st_mode);
	int islnk = S_ISLNK(lbuf.st_mode);

	int size = lbuf.st_size;

	if (isfile || islnk) {
		
		if (strncmp(lastItemLocalA, lastItem, EXT2_NAME_LEN) == 0) {
			return -2 // EEXIST
		} else {
			return -1 // trying to copy into invalid path
		}

	}

	char dotRef[EXT2_NAME_LEN] = ".";

	// how do we handle links ...

	// get to while loop only if isdir
	while (parentDir != NULL && inodeID != -1) {

		////////////
		// CASE ONE: the target dir IS JUST the root (a dot)
		///////////

		if (strncmp(parentDir, dotRef, EXT2_NAME_LEN) == 0 & childDir == NULL) {

			struct ext2_inode * rootInode (struct ext2_inode *)(inodeTable + inodeID * sizeof(struct ext2_inode));

			int numBlocks = rootInode->i_blocks / DSR;
			int blocknum;

			for (blocknum = 0; blocknum < numBlocks; blocknum++) {

				int rootEntBlock = rootInode->i_blocks[blocknum];
				int rootEntBlockIterator = 0;

				while (rootEntBlockIterator < EXT2_BLOCK_SIZE) {
					
					struct ext2_dir_entry * dirEntry = (struct ext2_dir_entry *)(disk + EXT2_BLOCK_SIZE * rootEntBlock + rootEntBlockIterator);

					char * dirEntryName = dirEntry->name;
					
					if (strncmp(lastItemLocalA, dirEntryName, EXT2_NAME_LEN) == 0) {
						// ALREADYIN HERE
						return -1; // FIX for error stuff 
					}

					rootEntBlockIterator = rootEntBlockIterator + dirEntry->rec_len;
					
				} // closes the while loop

			} // closes the block loop

			return EXT2_ROOT_INO; // the file will be copied as an element of the root directory
			
		} // closes case one if statement


		////////////
		// CASE TWO: the target is on a path with at least one directory 
		///////////

		struct ext2_inode * directoryInode = (struct ext2_inode *)(inodeTable + inodeID * sizeof(struct ext2_inode));

		int numBlk = directoryInode->i_blocks / DSR;
		int blknm;

		for (blknm = 0; blknm < numBlk; blknm++) {

			int directoryEntryBlock = directoryInode->i_blocks[blknm];
			int dirEntBlockIterator = 0;

			int directoryExists = 0;
			int newInodeID = -1;

			while (dirEntBlockIterator < EXT2_BLOCK_SIZE) {

				struct ext2_dir_entry * directoryEntry = (struct ext2_dir_entry *)(disk + EXT2_BLOCK_SIZE * directoryEntryBlock + dirEntBlockIterator);

				char * dirEntName = directoryEntry->name;
				int dirEntNodeID = directoryEntry->inode;

				if (strncmp(parentDir, dirEntName, EXT2_NAME_LEN) == 0) {

					if (directoryEntry->file_type == EXT2_FT_REG_FILE) {

						// error: invalid path
						return -1;

					} else if (directoryEntry->file_type == EXT2_FT_DIR) {
						directoryExists = 1;
						newInode = dirEntInodeID;
					}

				}

				dirEntBlockIterator = dirEntBlockIterator + directoryEntry->rec_len;
			} // closes the while loop

		

		} // closes the block loop

		if (!directoryExists) {

			// error: invalid path
			return -1;

		} else {
			parentDir = childDir;
			childDir = strtok(NULL,"/");
			inodeID = newInodeID;
			directoryExists = 0;

		}
		
		

	} // closes inodeID while loop

	/////////
	// FINAL PART: now, the inodeID should point to the inode ID of the target directory
	// we just check in here if something already has the same name as the file to copy
	// if it doesn't, we return the inode ID of this parent directory
	/////////

	struct ext2_inode * finalDirectoryInode = (struct ext2_inode *)(inodeTable + inodeID * sizeof(struct ext2_inode));

	int numbloxFinalDir = finalDirectoryInode->i_blocks / DSR;
	int currblk;

	for (currblk = 0; currblk < numbloxFinalDir; currblk++) {

		int finalEntBlock = finalDirectoryInode->i_block[currblock];
		int finalEntBlockIterator = 0;

		while (finalEntBlockIterator < EXT2_BLOCK_SIZE) {

			struct ext2_dir_entry * currDirEntry = (struct ext2_dir_entry *)(disk + EXT2_BLOCK_SIZE* finalEntBlock + finalEntBlockIterator);

			char * currDirEntName = currDirEntry->name; // CAN WE STRNCMP WITH A CONSTANT CAR LIKE THIS ...

			if (strncmp(lastItemLocalA, currDirEntName, EXT2_NAME_LEN) == 0) {

				// already something with the same name, return error of some kind
				return -1; // change later

			}

			finalEntBlockIterator = finalEntBlockIterator + currDirEntry->rec_len;

		}

	}

	return inodeID; // should be the inodeID of the target directory

}


int copy(char * localPath, char * pathname) {

	int pathLen = strlen(pathname);
	char diskPath[pathLen+1];
	memset(diskPath, 0, sizeof(diskPath));
	strncpy(diskPath, pathname, pathLen+1);

	if (diskPath[pathLen-1] == '/') {
		diskPath[pathLen-1] = 0;
	}

	if (diskPath[0] == '/') {
		memmove(diskPath, diskPath+1, pathLen);
	}

	int localPathGood = open(localPath, O_RDONLY);

	if (localPathGood == -1) {
		// ERROR
		exit(1); // fix for proper error later
	}

	int directoryParentInodeNum = fileGoodpath(diskPath);

	if (directoryParentInodeNum == -1) {
		return -1; // SOME kind of error as usual, make this a case later
	}

	if (directoryParentInodeNum == -2) {
		return -2; // RETURN EEXIST
	}

	int fileInodeNum = allocateNewFileInode();

	int readCopyStatus = readAndCopy(diskPath, directoryParentInodeNum);
		// copies into the blocks

	if (readCopyStatus == -2) {
		// not enough space
		return -2;
	}

	int dirEntSuccess = addAsDirEnt(localPath, fileInodeNum, directoryParentInodeNum);

	return 0;

}

int main(int argc, char ** argv) {

    if(argc != 3) {
        fprintf(stderr, "Usage: %s <image file name> <absolute path>\n", argv[0]);
        exit(1);
    }
    int fd = open(argv[1], O_RDWR);

    disk = mmap(NULL, 128 * 1024, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if(disk == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }

	int f;

	f = copy(argv[2], argv[3]);

	if (f == -1) {
		return -1; // exit accordingly
	}
	
	return 0;

}
